getgenv().AuthKey = "HUGE_yr9lEktNGFjD"
getgenv().LoadSettings = {
    Example_Setting = Example_Value
}
loadstring(game:HttpGet("https://HugeGames.io/ps99"))()

local replicatedStorage = game:GetService("ReplicatedStorage")
local merchantRequestPurchase = replicatedStorage:WaitForChild("Network"):WaitForChild("Merchant_RequestPurchase")

local function autoMerchant()
    while true do
        for i = 1, 8 do
            local args = {
                [1] = "MiningMerchant",
                [2] = i
            }
            
            merchantRequestPurchase:InvokeServer(unpack(args))
            wait(1) -- Espera 1 segundo entre as compras para evitar sobrecarga
        end
        wait(10) -- Espera 10 segundos antes de reiniciar o loop
    end
end

-- Inicia o auto-merchant em uma nova coroutine
coroutine.wrap(autoMerchant)()


wait(10)
local Pl = game:GetService("Players").LocalPlayer
local RS = game:GetService("ReplicatedStorage")

local savemodule = require(RS.Library.Client.Save)
local FileSave = savemodule.Get(Pl)

local itemOrder = {"Mining TNT Crate", "Mining TNT", "Mining Bomb"}

local initialPosition = Pl.Character and Pl.Character.PrimaryPart.Position or Vector3.new(0, 0, 0)
local stationaryTime = 0
local AmountTNT = 10 -- quantidade de TNT
local AmountTimer = 15 -- quantidade de tempo pra proxima verificação
local proximityThreshold = 3 -- quantidade de studs (maximo 5)
local CooldownTNT = 0.7 -- delay pra jogar 1 tnt atras da outra

local G = getgenv()
G.AutoTNT = true

while G.AutoTNT do
    task.wait(1)
    local currentPosition = Pl.Character and Pl.Character.PrimaryPart.Position or Vector3.new(0, 0, 0)

    if (currentPosition - initialPosition).magnitude <= proximityThreshold then
        stationaryTime = stationaryTime + 1
    else
        stationaryTime = 0
        initialPosition = currentPosition
    end

    if stationaryTime >= 5 then
        for i, itemName in ipairs(itemOrder) do
            if not G.AutoTNT then break end
            local hasEnough = false
            for IdItem, tb in pairs(FileSave.Inventory.Consumable) do
                if not G.AutoTNT then break end
                if tb.id == itemName and tb._am >= 2 then
                    RS.Network.Consumables_Consume:InvokeServer(IdItem, 1)
                    task.wait(CooldownTNT)
                    RS.Network.Consumables_Consume:InvokeServer(IdItem, 1)
                    hasEnough = true
                    break
                end
            end
            if hasEnough then
                break
            end
        end
        stationaryTime = 0
    end
end
